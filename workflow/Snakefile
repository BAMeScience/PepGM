#configuration
WorkflowPath = os.path.dirname(os.path.realpath(workflow.snakefile))
include: WorkflowPath + '/rules/config.smk'
include: WorkflowPath + '/rules/searchgui+pepshaker.smk'
include: WorkflowPath + '/rules/buildDatabase.smk'
include: WorkflowPath + '/rules/filterHostCrap.smk'
include: WorkflowPath + '/rules/protGM.smk'



rule all:
    input:
        expand(ResultsDir + SampleName + '/Prior{Prior}/' + ReferenceDBName + '_PepGM_Results_a{alpha}_b{beta}_p{Prior}.png',alpha=AlphaRange,beta=BetaRange,Prior=prior),
        ResultsDir + SampleName + '/paramcheck.png',

#          DataDirectory + SampleName + '/' + firstTarget +'_proteinCount.png'


rule getTargets:
    input:
        ResultsDir + SampleName + '/{DBname}_Default_PSM_Report.txt',
        ResourcesDir + TaxidMapping + 'accessions_hashed.npy',
        ResourcesDir + TaxidMapping + 'taxids.txt',
    params:
        query=ResultsDir + SampleName + '/{DBname}_query_accessions.txt',
        samplename=SampleName,
        hostname=HostName,
        DBname=ReferenceDBName
    conda: 'envs/graphenv.yml'
    output:
        ResultsDir + SampleName + '/{DBname}_mapped_taxids.txt',ResultsDir + SampleName + '/{DBname}_mapped_taxids_weights.csv',ResultsDir + SampleName + '/{DBname}_mapped_taxids_accessions.csv'
    shell: "python3 workflow/scripts/getTargets.py -rq {input[0]} -q {params.query} -d {input[1]} -t {input[2]} -r {output[0]} "


rule CreateFactorGraph:
    input: ResultsDir + SampleName + '/{DBname}_Default_PSM_Report.txt',
           ResultsDir + SampleName + '/{DBname}_mapped_taxids.txt'
    output: ResultsDir + SampleName + '/{DBname}_PepGM_graph.graphml'
    conda: 'envs/graphenv.yml'
    params:
        samplename=SampleName,
        hostname=HostName,
        DBname=ReferenceDBName,
        ResultsDir=ResultsDir,
        APImail=APImail,
        APIkey=APIkey
    log: ResultsDir + SampleName + '/{DBname}.log'
    shell: 'python3 workflow/scripts/CreatePepGMGraph.py --APIkey {params.APIkey} --APImail {params.APImail} --targetTaxa {input[1]}  --PSM_Report {input[0]} --PeptideMapPath ' + ResultsDir + '{params.samplename}/Mapped_Taxa_Proteins.json --out {output} &>> {log}'

rule CreateProteinFactorGraph:
    input: ResultsDir + SampleName + '/{DBname}_protein_graph.csv'
    output: ResultsDir + SampleName + '/{DBname}_PepGM_graph_protein.graphml'
    conda: 'envs/graphenv.yml'
    params:
        samplename=SampleName,
        hostname=HostName,
        DBname=ReferenceDBName,
        ResultsDir=ResultsDir,
        APImail=APImail,
        APIkey=APIkey
    log: ResultsDir + SampleName + '/{DBname}.log'
    shell: 'python3 workflow/scripts/CreatePepGMGraph.py --protGM True --APIkey {params.APIkey} --APImail {params.APImail}  --out {output} --proteinCSV {input} &>> {log}'

def PepGMtoUse(condition):
    if condition:
        return ResultsDir + SampleName + '/{DBname}_PepGM_graph_protein.graphml'
    else:
        return ResultsDir + SampleName + '/{DBname}_PepGM_graph.graphml'



rule RunPepGM:
    input: PepGMtoUse(ProteinGM)
    output: ResultsDir + SampleName + '/Prior{Prior}/{DBname}_PepGM_Results_a{alpha}_b{beta}_p{Prior}.csv'
    conda: 'envs/graphenv.yml'
    params:
        samplename=SampleName,
        hostname=HostName,
        DBname=ReferenceDBName,
    log: ResultsDir + SampleName + '/Prior{Prior}/log/{DBname}_a{alpha}_b{beta}_pepGM.log'
    shell: 'python3  workflow/scripts/PepGM.py --GraphMLPath {input} --prior {wildcards.Prior} --alpha {wildcards.alpha} --beta {wildcards.beta} --out {output} &>> {log}'


rule BarPlotResults:
    input: ResultsDir + SampleName + '/Prior{Prior}/{DBname}_PepGM_Results_a{alpha}_b{beta}_p{Prior}.csv'
    output: ResultsDir + SampleName + '/Prior{Prior}/{DBname}_PepGM_Results_a{alpha}_b{beta}_p{Prior}.png',
    conda: 'envs/graphenv.yml'
    params: NumberofResults=TaxaInPlot
    log: ResultsDir + SampleName + '/Prior{Prior}/log/{DBname}_a{alpha}_b{beta}.log'
    shell: 'python3 workflow/scripts/BarPlotResults.py --ResultsFile {input} --NumberofResults {params.NumberofResults} --out {output} &>> {log}'


rule FindBestParameters:
    input: ResultsDir + SampleName + '/' + ReferenceDBName + '_mapped_taxids_weights.csv',
        expand(ResultsDir + SampleName + '/Prior{Prior}/' + ReferenceDBName + '_PepGM_Results_a{alpha}_b{beta}_p{Prior}.png',alpha=AlphaRange,beta=BetaRange,Prior=prior)
    output: ResultsDir + SampleName + '/paramcheck.png',
            ResultsDir + SampleName + '/PhyloTreeView.png'
    conda: 'envs/graphenv.yml'
    log: ResultsDir + SampleName + '/paramcheck.log'
    params: Results=ResultsDir + SampleName,
        host=ScientificHostName,
        DB=ReferenceDBName
    shell: 'python3 workflow/scripts/SearchAnalysisOutputFormatter.py --weights {input[0]} --refdb {params.DB} --host {params.host} --results {params.Results} --out {output[0]} &>> {log}'


#rules only needed for debugging/checking results
rule CountProteinsInJson:
    input: ResultsDir + SampleName + '/{taxonname}.json'
    output: ResultsDir + SampleName + '/{taxonname}_proteinCount.png'
    conda: 'envs/graphenv.yml'
    shell: 'python3 workflow/scripts/CountProteins.py --ResultsFile {input} --out {output}'

#rule all:
#    input:
#        expand(ResultsDir + SampleName + '/NArtPeps{N}/Prior{Prior}/' + ReferenceDBName + '_PepGM_Results_a{alpha}_b{beta}_p{Prior}.png',alpha=AlphaRange,beta=BetaRange,Prior=prior,N=[1,10,100,200,400,500,600]),
#        ResultsDir + SampleName + '/NArtPeps{N}/paramcheck.png',

rule RunPepGMWithArtificialPeptides:
    input: PepGMtoUse(ProteinGM)
    output: ResultsDir + SampleName + '/NArtPeps{N}/Prior{Prior}/{DBname}_PepGM_Results_a{alpha}_b{beta}_p{Prior}.csv'
    conda: 'envs/graphenv.yml'
    params:
        samplename=SampleName,
        hostname=HostName,
        DBname=ReferenceDBName,
    log: ResultsDir + SampleName + '/NArtPeps{N}/Prior{Prior}/log/{DBname}_a{alpha}_b{beta}_pepGM.log'
    shell: 'python3  workflow/scripts/Paper_scripts/AddArtificialPeptides.py ----artificial_pep_number {wildcards.N} --GraphMLPath {input} --prior {wildcards.Prior} --alpha {wildcards.alpha} --beta {wildcards.beta} --out {output} &>> {log}'

rule BarPlotResultsArtificialPeptides:
    input: ResultsDir + SampleName + '/NArtPeps{N}/Prior{Prior}/{DBname}_PepGM_Results_a{alpha}_b{beta}_p{Prior}.csv'
    output: ResultsDir + SampleName + '/NArtPeps{N}/Prior{Prior}/{DBname}_PepGM_Results_a{alpha}_b{beta}_p{Prior}.png',
    conda: 'envs/graphenv.yml'
    params: NumberofResults=TaxaInPlot
    log: ResultsDir + SampleName + '/NArtPeps{N}/Prior{Prior}/log/{DBname}_a{alpha}_b{beta}.log'
    shell: 'python3 workflow/scripts/BarPlotResults.py --ResultsFile {input} --NumberofResults {params.NumberofResults} --out {output} &>> {log}'


rule FindBestParametersArtificialPeptides:
    input: ResultsDir + SampleName + '/' + ReferenceDBName + '_mapped_taxids_weights.csv',
        expand(ResultsDir + SampleName + '/NArtPeps{N}/Prior{Prior}/' + ReferenceDBName + '_PepGM_Results_a{alpha}_b{beta}_p{Prior}.png',alpha=AlphaRange,beta=BetaRange,Prior=prior)
    output: ResultsDir + SampleName + '/NArtPeps{N}/paramcheck.png',
            ResultsDir + SampleName + '/NArtPeps{N}/PhyloTreeView.png'
    conda: 'envs/graphenv.yml'
    log: ResultsDir + SampleName + '/NArtPeps{N}/paramcheck.log'
    params: Results=ResultsDir + SampleName,
        host=ScientificHostName,
        DB=ReferenceDBName
    shell: 'python3 workflow/scripts/SearchAnalysisOutputFormatter.py --weights {input[0]} --refdb {params.DB} --host {params.host} --results {params.Results} --out {output[0]} &>> {log}'
