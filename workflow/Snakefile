
#configuration
WorkflowPath = os.path.dirname(os.path.realpath(workflow.snakefile))
include: WorkflowPath +'/snakefiles/config.snakefile'



#wildcard_constraints:
#     hostname = '[a-zA-Z]',
#     DBname = '[a-zA-Z]',
#     samplename = '[a-zA-Z]'

#need to install mono for this to work
#rule ConvertSpectratoMGF:
#     input:'{samplename}.raw' or '{samplename}.mzml'
#     output:'{samplename}.mgf'
#     shell:

rule all:
     input:
          DataDirectory + SampleName + '/' + HostName + '_' + ReferenceDBName +'_PepGM_Results.png',
          DataDirectory + SampleName + '/' + firstTarget +'_proteinCount.png'

rule AddContaminantsandHost:
     input:
          DatabaseDirectory+'crap.fasta',
          DatabaseDirectory+'{hostname}.fasta',
          DatabaseDirectory+'{DBname}_viral.fasta'

     output: DatabaseDirectory+ '{hostname}+crap+{DBname}_viral.fasta'
     shell:'cat {input} > {output}'

rule AddDecoys:
     input: DatabaseDirectory+'{hostname}+crap+{DBname}_viral.fasta'
     output: DatabaseDirectory+'{hostname}+crap+{DBname}_viral_concatenated_target_decoy.fasta'
     shell: 'java -cp '+SearchGUIDir+'SearchGUI-4.1.1.jar eu.isas.searchgui.cmd.FastaCLI -in {input} -decoy' 

rule SearchSpectra:
     input:
          DataDirectory+'{samplename}/{samplename}.mgf', 
          DatabaseDirectory+'{hostname}+crap+{DBname}_viral_concatenated_target_decoy.fasta',
          DataDirectory+'{samplename}/{samplename}.par'
     params:
          samplename = SampleName,
          hostname = HostName,
          DBname = ReferenceDBName
     output:  DataDirectory+'{samplename}/{hostname}_{DBname}_searchgui_out.zip'
     shell: 'java -cp '+SearchGUIDir+'SearchGUI-4.1.1.jar eu.isas.searchgui.cmd.SearchCLI -spectrum_files {input[0]} -fasta_file {input[1]} -output_folder '+ DataDirectory +'{params.samplename} -id_params {input[2]} -output_default_name {params.hostname}_{params.DBname}_searchgui_out -psm_fdr '+psmFDR+' -peptide_fdr '+peptideFDR+' -protein_fdr '+proteinFDR+' '+searchengines+' 1'

rule RunPeptideShaker:
     input:
          DataDirectory+'{samplename}/{hostname}_{DBname}_searchgui_out.zip',
          DataDirectory+'{samplename}/{samplename}.mgf', 
          DatabaseDirectory+'{hostname}+crap+{DBname}_viral_concatenated_target_decoy.fasta',
     params:
          samplename = SampleName,
          hostname = HostName,
          DBname = ReferenceDBName
     output: DataDirectory+'{samplename}/{hostname}_{DBname}.psdb'
     shell: 'java -cp '+PeptideShakerDir+'PeptideShaker-2.1.1.jar eu.isas.peptideshaker.cmd.PeptideShakerCLI -reference {params.hostname}_{params.DBname} -fasta_file {input[2]} -identification_files {input[0]} -spectrum_files {input[1]} -out {output}'

rule SimplePeptideList:
     input:  DataDirectory+'{samplename}/{hostname}_{DBname}.psdb'
     output: DataDirectory +'{samplename}/{hostname}_{DBname}_Default_PSM_Report.txt'
     params:
          samplename = SampleName,
          hostname = HostName,
          DBname = ReferenceDBName
     shell: 'java -cp '+PeptideShakerDir+'PeptideShaker-2.1.1.jar eu.isas.peptideshaker.cmd.ReportCLI -in {input} -out_reports '+DataDirectory +'{params.samplename} -reports 3'

rule CreateFactorGraph:
     input: DataDirectory +'{samplename}/{hostname}_{DBname}_Default_PSM_Report.txt'
     output: DataDirectory +'{samplename}/{hostname}_{DBname}_PepGM_graph.graphml'
     conda: 'envs/graphenv.yml'
     params:
          samplename = SampleName,
          hostname = HostName,
          DBname = ReferenceDBName,
          targetTaxa = TargetTaxa,
          firstTarget = firstTarget
     shell: 'python3 workflow/scripts/CreatePepGMGraph.py --targetTaxa {params.targetTaxa} --PSM_Report {input} --PeptideMapPath '+DataDirectory+'{params.samplename}/{params.firstTarget}.json --out {output}'

rule RunPepGM:
     input: DataDirectory +'{samplename}/{hostname}_{DBname}_PepGM_graph.graphml'
     output: DataDirectory +'{samplename}/{hostname}_{DBname}_PepGM_Results.csv'
     conda: 'envs/graphenv.yml'
     params:
          samplename = SampleName,
          hostname = HostName,
          DBname = ReferenceDBName,
          targetTaxa = TargetTaxa,
          firstTarget = firstTarget
     shell: 'python3  workflow/scripts/PepGM.py --targetTaxa {params.targetTaxa} --GraphMLPath {input} --alpha --beta --out {output}'

rule BarPlotResults:
     input: DataDirectory +'{samplename}/{hostname}_{DBname}_PepGM_Results.csv'
     output: DataDirectory +'{samplename}/{hostname}_{DBname}_PepGM_Results.png'
     conda: 'envs/graphenv.yml'
     params: NumberofResults = TaxaInPlot
     shell: 'python3 workflow/scripts/BarPlotResults.py --ResultsFile {input} --NumberofResults {params.NumberofResults} --out {output}'

rule CountProteinsInJson:
     input: DataDirectory +'{samplename}/{taxonname}.json'
     output : DataDirectory + '{samplename}/{taxonname}_proteinCount.png'
     params : NumberofResults = TaxaInProteinCount
     conda: 'envs/graphenv.yml'
     shell: 'python3 workflow/scripts/CountProteins.py --ResultsFile {input} --NumberofResults {params.NumberofResults} --out {output}'
     


     